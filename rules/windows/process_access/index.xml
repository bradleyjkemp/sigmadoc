<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>process_access on My New Hugo Site</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/</link><description>Recent content in process_access on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Oct 2019 22:07:26 -0700</lastBuildDate><atom:link href="https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/index.xml" rel="self" type="application/rss+xml"/><item><title>Suspicious In-Memory Module Execution</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_in_memory_assembly_execution.yml/</link><pubDate>Mon, 28 Oct 2019 22:07:26 -0700</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_in_memory_assembly_execution.yml/</guid><description>&lt;p>Detects the access to processes by other suspicious processes which have reflectively loaded libraries in their memory space. An example is SilentTrinity C2 behaviour. Generally speaking, when Sysmon EventID 10 cannot reference a stack call to a dll loaded from disk (the standard way), it will display &amp;ldquo;UNKNOWN&amp;rdquo; as the module name. Usually this means the stack call points to a module that was reflectively loaded in memory. Adding to this, it is not common to see such few calls in the stack (ntdll.dll &amp;ndash;&amp;gt; kernelbase.dll &amp;ndash;&amp;gt; unknown) which essentially means that most of the functions required by the process to execute certain routines are already present in memory, not requiring any calls to external libraries. The latter should also be considered suspicious.&lt;/p></description></item><item><title>Mimikatz through Windows Remote Management</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_mimikatz_trough_winrm.yml/</link><pubDate>Mon, 20 May 2019 12:25:58 +0200</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_mimikatz_trough_winrm.yml/</guid><description>&lt;p>Detects usage of mimikatz through WinRM protocol by monitoring access to lsass process by wsmprovhost.exe.&lt;/p></description></item><item><title>CMSTP Execution</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_cmstp_execution.yml/</link><pubDate>Mon, 16 Jul 2018 02:53:41 +0300</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_cmstp_execution.yml/</guid><description>&lt;p>Detects various indicators of Microsoft Connection Manager Profile Installer execution&lt;/p></description></item><item><title>Credentials Dumping Tools Accessing LSASS Memory</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_cred_dump_lsass_access.yml/</link><pubDate>Thu, 16 Feb 2017 18:02:26 +0100</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_cred_dump_lsass_access.yml/</guid><description>&lt;p>Detects process access LSASS memory which is typical for credentials dumping tools&lt;/p></description></item><item><title>Credential Dumping by LaZagne</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_lazagne_cred_dump_lsass_access.yml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_lazagne_cred_dump_lsass_access.yml/</guid><description>&lt;p>Detects LSASS process access by LaZagne for credential dumping.&lt;/p></description></item><item><title>LSASS Memory Dump</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_lsass_memdump.yml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_lsass_memdump.yml/</guid><description>&lt;p>Detects process LSASS memory dump using procdump or taskmgr based on the CallTrace pointing to dbghelp.dll or dbgcore.dll for win10&lt;/p></description></item><item><title>Malware Shellcode in Verclsid Target Process</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_malware_verclsid_shellcode.yml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_malware_verclsid_shellcode.yml/</guid><description>&lt;p>Detects a process access to verclsid.exe that injects shellcode from a Microsoft Office application / VBA macro&lt;/p></description></item><item><title>Suspect Svchost Memory Asccess</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_invoke_phantom.yml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_invoke_phantom.yml/</guid><description>&lt;p>Detects suspect access to svchost process memory such as that used by Invoke-Phantom to kill the winRM windows event logging service.&lt;/p></description></item></channel></rss>