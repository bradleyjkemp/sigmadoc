<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>attack.t1055.001 on My New Hugo Site</title><link>https://bradleyjkemp.dev/sigmadoc/tags/attack.t1055.001/</link><description>Recent content in attack.t1055.001 on My New Hugo Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 28 Jan 2020 11:29:24 +0100</lastBuildDate><atom:link href="https://bradleyjkemp.dev/sigmadoc/tags/attack.t1055.001/index.xml" rel="self" type="application/rss+xml"/><item><title>Renamed ZOHO Dctask64</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_creation/win_susp_renamed_dctask64.yml/</link><pubDate>Tue, 28 Jan 2020 11:29:24 +0100</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_creation/win_susp_renamed_dctask64.yml/</guid><description>&lt;p>Detects a renamed dctask64.exe used for process injection, command execution, process creation with a signed binary by ZOHO Corporation&lt;/p></description></item><item><title>ZOHO Dctask64 Process Injection</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_creation/win_susp_dctask64_proc_inject.yml/</link><pubDate>Tue, 28 Jan 2020 11:29:24 +0100</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_creation/win_susp_dctask64_proc_inject.yml/</guid><description>&lt;p>Detects suspicious process injection using ZOHO&amp;rsquo;s dctask64.exe&lt;/p></description></item><item><title>Suspicious In-Memory Module Execution</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_in_memory_assembly_execution.yml/</link><pubDate>Mon, 28 Oct 2019 22:07:26 -0700</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_access/sysmon_in_memory_assembly_execution.yml/</guid><description>&lt;p>Detects the access to processes by other suspicious processes which have reflectively loaded libraries in their memory space. An example is SilentTrinity C2 behaviour. Generally speaking, when Sysmon EventID 10 cannot reference a stack call to a dll loaded from disk (the standard way), it will display &amp;ldquo;UNKNOWN&amp;rdquo; as the module name. Usually this means the stack call points to a module that was reflectively loaded in memory. Adding to this, it is not common to see such few calls in the stack (ntdll.dll &amp;ndash;&amp;gt; kernelbase.dll &amp;ndash;&amp;gt; unknown) which essentially means that most of the functions required by the process to execute certain routines are already present in memory, not requiring any calls to external libraries. The latter should also be considered suspicious.&lt;/p></description></item><item><title>CreateRemoteThread API and LoadLibrary</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/sysmon/sysmon_createremotethread_loadlibrary.yml/</link><pubDate>Thu, 24 Oct 2019 14:34:16 +0200</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/sysmon/sysmon_createremotethread_loadlibrary.yml/</guid><description>&lt;p>Detects potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process&lt;/p></description></item><item><title>MavInject Process Injection</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_creation/win_mavinject_proc_inj.yml/</link><pubDate>Wed, 16 Jan 2019 23:36:31 +0100</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_creation/win_mavinject_proc_inj.yml/</guid><description>&lt;p>Detects process injection using the signed Windows tool Mavinject32.exe&lt;/p></description></item><item><title>CobaltStrike Process Injection</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/sysmon/sysmon_cobaltstrike_process_injection.yml/</link><pubDate>Fri, 30 Nov 2018 10:25:05 +0100</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/sysmon/sysmon_cobaltstrike_process_injection.yml/</guid><description>&lt;p>Detects a possible remote threat creation with certain characteristics which are typical for Cobalt Strike beacons&lt;/p></description></item><item><title>TAIDOOR RAT DLL Load</title><link>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_creation/win_apt_taidoor.yml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bradleyjkemp.dev/sigmadoc/rules/windows/process_creation/win_apt_taidoor.yml/</guid><description>&lt;p>Detects specific process characteristics of Chinese TAIDOOR RAT malware load&lt;/p></description></item></channel></rss>